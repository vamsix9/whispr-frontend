name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for linting errors
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"

      - name: Type check
        run: npx tsc --noEmit

      - name: Build check
        run: npm run build

      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = '## üîç PR Validation Results\n\n';
            
            try {
              // Check if build was successful
              const buildSuccess = fs.existsSync('dist');
              comment += `‚úÖ Build: ${buildSuccess ? 'Success' : 'Failed'}\n`;
              
              // Check linting
              try {
                execSync('npm run lint', { stdio: 'pipe' });
                comment += '‚úÖ Linting: Passed\n';
              } catch (e) {
                comment += '‚ùå Linting: Failed\n';
              }
              
              // Check formatting
              try {
                execSync('npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"', { stdio: 'pipe' });
                comment += '‚úÖ Formatting: Passed\n';
              } catch (e) {
                comment += '‚ùå Formatting: Failed\n';
              }
              
            } catch (error) {
              comment += '‚ùå Validation failed\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
